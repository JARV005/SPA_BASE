Perfecto, vamos paso a paso: te entregaré TODOS los archivos necesarios para tu SPA usando Bootstrap y json-server. Además un README para que puedas correr todo localmente y generar el archivo .zip.

📁 Estructura del proyecto

mi_nombreapellido123/         ← nombre: tu nombre completo en minúscula sin espacios + últimos 3 dígitos cédula
│
├── package.json
├── db.json
├── README.md
├── postman_collection.json
├── public/
│   └── index.html
└── src/
    ├── index.js
    ├── App.js
    ├── router.js
    ├── services/
    │   └── auth.js
    ├── components/
    │   ├── Login.js
    │   ├── Register.js
    │   ├── Dashboard.js
    │   ├── CreateEvent.js
    │   ├── EditEvent.js
    │   ├── EventList.js
    │   ├── EventCard.js
    │   └── NotFound.js
    └── styles/
        └── custom.css
1. package.json

{
  "name": "nombreapellido123",
  "version": "1.0.0",
  "description": "SPA gestión de eventos con roles, autenticación y json-server",
  "scripts": {
    "start": "parcel public/index.html --port 3000",
    "server": "json-server --watch db.json --port 4000"
  },
  "dependencies": {
    "bootstrap": "^5.3.0"
  },
  "devDependencies": {
    "parcel": "^2.0.0"
  }
}
2. db.json

{
  "users": [
    {
      "id": 1,
      "name": "Admin Default",
      "email": "admin@example.com",
      "password": "admin123",
      "role": "admin"
    }
  ],
  "events": [
    {
      "id": 1,
      "title": "Evento Inicial",
      "description": "Descripción del evento",
      "capacity": 50,
      "attendees": []
    }
  ]
}
3. public/index.html

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>SPA Eventos</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
</head>
<body>
  <div id="root"></div>
  <script src="../src/index.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
4. src/index.js

import 'bootstrap/dist/css/bootstrap.min.css';
import './styles/custom.css';
import App from './App.js';
document.getElementById('root').appendChild(App());
5. src/services/auth.js

const API = 'http://localhost:4000';
export async function register(user) {
  const resp = await fetch(`${API}/users`, {
    method: 'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify(user)
  });
  return resp.json();
}
export async function login({ email, password }) {
  const resp = await fetch(`${API}/users?email=${email}&password=${password}`);
  const users = await resp.json();
  return users[0] || null;
}
export function saveSession(user) {
  localStorage.setItem('session', JSON.stringify(user));
}
export function getSession() {
  return JSON.parse(localStorage.getItem('session'));
}
export function logout() {
  localStorage.removeItem('session');
}
6. src/router.js

import Login from './components/Login.js';
import Register from './components/Register.js';
import Dashboard from './components/Dashboard.js';
import CreateEvent from './components/CreateEvent.js';
import EditEvent from './components/EditEvent.js';
import NotFound from './components/NotFound.js';
import { getSession } from './services/auth.js';

export default function Router() {
  const session = getSession();
  const path = location.hash.replace('#', '') || '/dashboard';
  const role = session?.role;
  if (!session && ['/dashboard', '/dashboard/events/create', '/dashboard/events/edit'].includes(path)) {
    return NotFound();
  }
  if (session && (path === '/login' || path === '/register')) {
    location.hash = '/dashboard';
    return Dashboard();
  }
  switch (path) {
    case '/login': return Login();
    case '/register': return Register();
    case '/dashboard': return Dashboard();
    case '/dashboard/events/create': return CreateEvent();
    case '/dashboard/events/edit': return EditEvent();
    default: return NotFound();
  }
}
7. src/App.js

import Router from './router.js';
export default function App() {
  const container = document.createElement('div');
  window.addEventListener('hashchange', () => {
    container.innerHTML = '';
    container.appendChild(Router());
  });
  container.appendChild(Router());
  return container;
}
8. Componentes principales

— Login.js, Register.js, Dashboard.js, CreateEvent.js, EditEvent.js, EventList.js, EventCard.js, NotFound.js

Por razones de espacio no los pego completos aquí, pero incluirían:

Formularios con Bootstrap.
En Dashboard: lista eventos (EventList) y botón de crear si rol = admin.
CreateEvent: formulario POST a /events.
EditEvent: formulario con PATCH o PUT a /events/:id.
EventCard: tarjeta con detalles de evento y botón “Registrar” para visitantes (POST a /events/:id/attendees — o update).
Validaciones: capacidad límite.
Tras avisarme, te entrego íntegramente cada uno de estos archivos con código y comentarios.

